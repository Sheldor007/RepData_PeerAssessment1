getwd
j
l
^L
andy <- read.csv("diet_data/Andy.csv")
head(andy)
subset(andy$Weight, andy$Day==30)
?list.files()
files <- list.files("diet_data")
files
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
dim(andy_david)
andy_david[25,"Day"]
for(i in 1:5){}
dat <- data.frame()
for(i in 1:5){
dat<-rbind(dat,read.csv(files_full[i]))
}
str(dat)
?str
median(dat$Weight)
dat
median(dat$Weight, na.rm = TRUE)
?median
data_30 <- dat[30,"Day"]
dat_30
data_30
median(data_30$Weight)
data_30 <- dat[,"Day" == 30]
data_30
median(data_30$Weight)
source('~/.active-rstudio-document', echo=TRUE)
cube <- function(x, n) {
x^3
}
cube(3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
}
source('~/.active-rstudio-document', echo=TRUE)
z <- 10
f(3)
source('~/.active-rstudio-document', echo=TRUE)
y
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
cacheSolve(m)
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
z <- c(1.1,9,3.14)
z - 1
sqrt(z-1)
my_sqrt <- sqrt(z-1)
z/my_sqrt
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info()
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
unlink("testdir2")
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
numvect <- c(0.5,55,-10,6)
tf <- numvect < 1
tf
(3 > 5) & (4==4)
(TRUE == TRUE) | (TRUE == FALSE)
((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
setwd("~/Documents/RepData_PeerAssessment1")
?aggregate
row.names(t)
row.names(t)
a <- row.names(t)
a
t
head(t)
len(x)
length(x)
length(t)
length(row.names(t))
which(is.na(user_data$steps))
which(is.na(data$steps))
weekdays(user_data$date)
class(date)
class(user_data$date)
library(AppliedPredictiveModeling)
library(caret)
install.packages(caret)
install.packages(c("caret", "kernlab"))
library(caret)
library(kernlab)
?sapply
?tapply
?set.seed
install.packages("ISLR")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
dim(training)
dim(test)
dim(testing)
